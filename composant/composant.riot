<composant>
  <div class="columns">
    <div class="column is-one-third">
      <formation items={state.items} selectFormation={selectFormation} searchF={searchF} placeholder={placeholder}>
      </formation>
    </div>
    <div class="column">
      <listeEtablissements table={state.table} searchE={searchE}></listeEtablissements>
    </div>
  </div>
  <script>


    export default {
      clickCounter: 0,
      nameForma: null,
      resulta: null,
      nameFormaTD: null,
      count: null,
      onBeforeMount(props, state) {
        // initial state
        this.state = {
          formation: null,
          items: null,
          listeEtablissements: null,
          table: null
        }
        //console.log(this.state.table)
        this.findformation("").then((response) => {
          this.update({
            items: response
          })
          //console.log(this.state.items)
        })
      },

      searchF() {
        this.findformation("").then((response) => {
          this.update({
            items: response
          })
        })
        //console.log(this.state.items)
      },
      searchE() {
        this.listeEtablissements().then((response) => {
          this.update({
            table: response
          })
        })
        //console.log(this.state.table)
      },

      selectFormation(event) {
        //console.log("clique effectuÃ©")
        const selectedFormation = event.currentTarget.getAttribute('data-formation');
        count = event.currentTarget.childNodes[2].outerText
        this.update({
          formation: selectedFormation

        });

        

        if (this.clickCounter === 0) {
          this.clickCounter++;
          this.findformation(selectedFormation).then((response) => {
            this.update({
              items: response
            });
            
            //console.log(this.state.items)
          });

        } else if (this.clickCounter === 1) {
          this.clickCounter++;
          this.findformation(encodeURI(selectedFormation)).then((response) => {
            this.update({
              items: response
            });
            
          });
        }else if (this.clickCounter === 2) {
          resulta = `https://data.enseignementsup-recherche.gouv.fr//api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=${count}&refine.fili=${nameForma}&refine.form_lib_voe_acc=${nameFormaTD}&refine.fil_lib_voe_acc=${encodeURI(selectedFormation)}`
          console.log(resulta)
          this.listeEtablissements().then((response) => {
            this.update({
              table: response
            })
          })

        }
      },



      async findformation(queryString = "") {
        let formation = "";
        switch (this.clickCounter) {
          case 0:
            resulta = `https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=0&facet=fili${queryString}`;
            break;

          case 1:
            resulta = `https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=0&facet=form_lib_voe_acc&refine.fili=${queryString}`;
            nameForma = queryString
            ////console.log(formation)
            break;

          case 2:
            resulta = `https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=0&facet=fil_lib_voe_acc&refine.fili=${nameForma}&refine.form_lib_voe_acc=${queryString}`;
            nameFormaTD = queryString
            break;

        }
        //console.log(resulta)
        let result = await fetch(resulta);
        let resultats = await result.json();
        //console.log(resultats)
        let table = []
        console.log(this.clickCounter)
        if(this.clickCounter!=3)
          table = resultats["facet_groups"][0]["facets"];
        //console.log(table)
        return table;
  

      },
      async listeEtablissements() {
      let result = await fetch(resulta)
			let data = await result.json();			
			let stats = data["records"];
			return stats;
			}
    }


  </script>

</composant>